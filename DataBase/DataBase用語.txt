カラム制約の確認／作成／削除
表の各列には整合性制約と呼ばれるルールを指定できます。整合性制約は５つあります。

NOT NULL制約
列の値がNULLでないこと。列に必ず値を入力しなければなりません。

一意キー制約（UNIQUE制約）
列のすべての値が一意であること。指定した列で値が重複することは許されません。
ただしNULLは複数存在することが許されます（NULLはどの値とも等しいと見なされない）。

主キー制約（PRIMARY KEY制約）
その列が行を一意に識別できること。表には、主キー制約を最大1つ指定できます。主キー制約では、
値は重複してはならず、またNULLも許可されません。1テーブルに１つしか存在できない。

参照整合性制約（REFERENCES制約、外部キー制約）
関連付けられた表の共通する列の関係が保たれていること。参照整合性制約では、表の各行の
外部キー値は、親表の値と一致していなければなりません。

CHECK制約
列の値がif文などで指定した条件を満たすこと。列の値は、CHECK制約で指定した条件に対しTRUE
またはUNKNOWNでなければなりません。


・オートインクリメントを設定しても、そのカラムが省略して登録された場合、「連番」が登録され、
	登録した場合は連番ではなくその値が登録される。つまり、主キーにオートインクリメントを設定
	しただけだと、重複したキーが生成される可能性があるため、
	主キーカラムには必ず主キー制約をする必要がある。

・正規化
https://oss-db.jp/dojo/dojo_info_04
正規化とは

データの重複をなくし整合的にデータを取り扱えるようにデータベースを設計することを、
データベースの正規化と呼びます。正規化を行っておくと、データの追加・更新・削除など
に伴うデータの不整合や喪失が起きるのを防ぎ、メンテナンスの効率を高めることができます。
正規化の段階には、第1～第5正規形およびボイスコッド正規形がありますが、ここでは、
データベースを設計する際に一般的に用いられる第1～第3正規形までを、前回登場した
テーブルをもとにして説明していきます。

非正規形

正規化がまったく行われておらず、1行の中に複数の繰り返し項目が存在するような
テーブルは非正規形と呼びます。


第1正規形

リレーショナルデータベースでは原則としてレコード単位で個々のデータを扱いますので、
非正規形のデータはデータベースに格納することすらできません。まずは、繰り返し項目
のそれぞれを別レコードとして独立させます。


第2正規形

第1正規形にすることでデータベースに格納できるようにはなりましたが、データ管理の観点
からは不十分です。例えば、新たな仕入先と契約したとしても、実際に何らかの商品
を入荷するまでは、その情報を管理することができません。また、仕入れ先の代表者名が変更
になると、複数のレコードを更新しなければならないため不整合を生じる恐れがあります。これは、
仕入先情報、商品情報、入荷履歴といった独立した情報をすべて同一のレコードで扱っている
ことが理由です。これらを別々のテーブルに分割することを考えましょう。
第1正規形のテーブルを見てみると、レコードを一意に定める要素は{仕入先, 商品名, 入荷日}
（これを主キーと呼びます）であることが分かります。主キー以外の項目（非キー属性）について、主キー
の一部の要素だけで決まる（部分関数従属と言います）ものがあれば別テーブルに分離させましょう。
各項目の従属関係は次の図を参照してください。


第3正規形

テーブルを分割することで、データの冗長性もだいぶ取り除かれました。しかし、まだ十分とは言えません。
津軽ファームの代表者である陸奥太郎さんが他の農園の代表も兼任しているとしたらどうなるでしょう。
陸奥太郎さんの連絡先が変更された場合には、やはり複数レコードを更新する必要が出てきてしまいます。
主キー以外の項目について項目同士で依存関係を持っているもの（推移的関数従属と言います）
も、別テーブルに切り分けましょう。
このように、非キー属性がすべて主キーに完全関数従属し、なおかつ推移的関数従属性の排除された
形式を第3正規形と呼びます。

まとめ

第1正規形
・繰り返し項目を持たない
・導出項目を持たない
第2正規形
・第1正規形を満たしている
・主キーに対してすべての非キー属性が完全関数従属
第3正規形
・第2正規形を満たしている
・すべての非キー属性がどの候補キーに対しても推移的に関数従属していない
本章では、非正規形から第3正規形まで段階的に正規化を進めてきましたが、
実際の業務では一足飛びにいきなり第3正規形で設計をすることもあると思います。
また逆に、検索効率を考えて、あえて正規化の程度を落とすこともあるでしょう。
手順に捉われ過ぎることなく、アプリケーションの利用シーンやパフォーマンス要件などに応じて
柔軟にデータベースを設計できるようになることを目指しましょう。












































































































