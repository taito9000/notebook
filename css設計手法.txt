・LaravelでSassをコンパイルする方法
１、  
	plugins: [
        laravel({
            input: ['resources/css/app.css', 'resources/scss/app.scss','resources/js/app.js'],
            refresh: true,						これを追加↑
        }),
    ],
    server: {
        hmr: {
            host: 'localhost'
        }
    }

２、
	'resources/scss/app.scss'の通りにフォルダとファイルを追加

３、
	blaldeファイル等の読み込みたい箇所に下記を記述します。
	Laravel Mixではコンパイル後のソースのパスを記述しましたが、Viteの場合はコンパイル前のソースのパスを記述します。

	app.blade.php等



・BEM
	Block Element Modifierの頭文字を取った設計思想で、独特な命名規則を用いる。
	OOCSSはマルチクラス(要素に対して複数のクラスを使う)に対し、BEMはシングルクラスでスタイルを適用させます。

	メリット・デメリット
	スタイルの使いまわしが少なく class名で範囲が絞られるため、メンテナンス性が良い
	class名が冗長になり、巨大なサイトだと命名する際に意外なほど疲れる…
	同じスタイル記述(marginとかfont-sizeとかpositionとか…)を何度も書く羽目になる…
	固有(ユニーク)レイアウトが多いデザインだったりすると、とてつもない量の css を書く羽目になる…


	原則：
	Block(塊), Element(要素), Modifier(修飾)の３つに分ける

	Block：ヘッダー、ナビゲーション、フッターなど独立したパーツ

	Element：Blockの中に含まれる様な検索ボタン、検索フィールドなど機能を持つパーツ
	Elementの前には2つのアンダースコア(__)

	Modifier:：BlockにもElementにも適用される装飾

	命名規則
	基本的なクラス名は、2つまたは1つのアンダースコア、ハイフンで区切ります。
	Elementの前には2つのアンダースコア(__)、Modifierの前には1つのアンダースコア(_)で区切ります。
	また単語の区切りには、ハイフン(-)を使います。


	BEMでは基本的にclassを使用し、idはほとんど使用しません。
	BEMのクラス名は、Block, Element, Modifierの3つに分けて考えます。

	基本的なクラス名は、2つまたは1つのアンダースコア、ハイフンで区切ります。
	、Modifierの前には1つのアンダースコア(_)で区切ります。また単語の区切りには、ハイフン(-)を使います。

	Modifierのと区切りをハイフン2つ(–)とする表記を見かける場合があると思いますが、
	それはBEMをアレンジしたもので、実際に公式サイトで紹介されているのは、アンダースコアを使うものです。

	block
	block__element
	block__element_modifier
	block_modifier

	これは基本の形です。

	クラス名のつけ方にはルールがあります。
	以下で詳しく解説しますので、順番に見ていきましょう。

block
	・Blockは、例えばヘッダーのBlock、ロゴのBlock、さらに、検索フォームのBlockなどが考えられます。
	それぞれのBlockは、サイトにおいて独立したパーツと考えます。
	・Blockは、Blockの中に作ることも可能です。つまり、入れ子構造にするということです。
	ヘッダーBlockの中に、ロゴBlockを作るといった感じです。
	・Blockは、後ほど紹介するElementとは違い、ページの中で様々な場所へ置くことができます。
	ロゴと検索フォームの位置を入れ替えるなどの作業も、Blockとして考えれば分かりやすくなります。
	・同じBlockは何度も再利用することが可能です。例えば、ブログなどの記事のBlockは、日にちごとに沢山あります。
	記事Blockのように、同じようなBlockを複数作成することも可能です。
	・Block名は、そのBlockの役割にします。特徴などは名前に入れない様にしましょう。
	また、複数の単語を区切りたい時は、ハイフン(-)を使用します。
	
Element
	Elementはブロックの構成要素です。
	例えば、検索フォームBlockの中には、送信ボタンや入力フォームがあります。
	それらがElementとなります。

	はBlockの構成要素なので、必ずBlockの中に存在する必要があります。

	・Elementは、Blockの中にのみ存在できます。
	・Elementのクラス名は、その役割を親となるBlockのclass名に(__)で繋ぎます。
	・ElementもBlockと同様に入れ子にすることが可能ですが、block__element__element
		の様な表記は間違っています。
	・Blockのところにも書きましたが、Elementを持たないBlockも存在します。
	また、BlockでありElementでもあるといった要素を作ることも可能です。
	たとえば、ヘッダーBlockの中のロゴBlockは、ヘッダーBlockのElementですよね。

	では、何がBlockで、何がElementなのでしょうか？
	後ほど詳しく解説します。

	class名の例）
	menu__item, nav__list, article__title など。。。

	ダメなclass名の例）
	menu__item__link, button_primary__text, button__primary など


Modifier
	Modifierは、BlockやElementの状態や特徴を表すものです。
	例えば、メニューの、今いるページの部分の色を変えたい、ボタンの大きさを変えたい、といった場合に使用します。

	Modifierは、単独で使うことはできません。必ず、BlockやElementと一緒に使ってください。
	ModifierをBlockやElementと一緒に使うことで、その見た目などを変更することができます。
	クラス名のつけ方は、親となるBlockやElementのclass名に、アンダースコア(_)で繋ぎます。
	Modifierには、Booleanとkey-valueの2種類があります。
	まず、Modifierには、2種類のタイプがあります。
	Boolean と key-value です。

	Boolean は真偽を表すものです。つまり true か false かで表されるものです。
	例えば、ボタンが無効か無効でないかなど、true か false で表せるものは Boolean を使用します。

	例）
	article__button_disabling, nav_nonexistenceなど。。。

	key-valueは、「keyはvalueです」という形のclass名にします。
	keyとvalueの間は、アンダースコア(_)で繋ぎます。

	例）
	button_color_primaryなど。。。












・OOCSS
	Object Oriented CSSと呼ばれ、オブジェクト指向に基づいて考案された設計思想。TwitterやGithub
	などで採用されており、Bootstrapがこの思想のもとに設計されている。
	パーツパーツの再利用性を上げ、レゴの様に積み上げていく設計。

	原則：
	構造(Structure)とスキン(Skin/見た目)を分けて考える
	コンテナ(Container)と内容(Contents)を分けて考える
	構造とスキンの分離とは
	まず構造とはwidth, height, border, padding, margin など形を作るモノ。一方、スキンはcolor,
	 border-color, background-colorなど見た目のスタイルを司るモノです。

	構造をスキンと分離する事で、同じ形だけど違う色のボタンなど再利用しやすくなります。

	コンテナとコンテンツの分離とは
	コンテナとコンテンツとは箱とその中身です。グリッドレイアウトなどを想像すると分かりやすいかと思います。コンテナには
	コンテナの、コンテンツにはコンテンツのCSSを別々に定義します。スタイルの適用では要素指定を行わず、クラスでの
	指定のみを行います。
	こうする事でHTMLの構造に依存せず、構造に変化があってもCSSの修正が不要になります。これによりCSSの
	メンテナンス性が向上します。




・SMACSS
	Scalable and Modular Architecture for CSSの略で、OOCSSやBEMの流れを汲んで
	生まれた設計思想です。OOCSS同様マルチクラスでスタイルの適用をします。
	
	オブジェクト指向な記述方法です。
	おおまかに下記のように5つに分類・細分化して記述していきます。

	・ベース(base.css)：要素そのもののデフォルトスタイルを定義
		要素セレクタ・属性セレクタ・擬似クラスセレクタなどのスタイリングを指定します(ID・classなどは指定しません)

	・レイアウト(layout.css)：画面をエリアごとに分割するためのスタイルを定義
		『l-』や『layout-』などの接頭辞を付けてレイアウト要素を指定します

	・モジュール(module.css)：再利用可能な単位でパーツの見た目を定義
		再利用可能な粒度で、各パーツを具体的に指定します

	・状態(state.css)：レイアウトやモジュールの特定の状態におけるスタイルを定義
		特定状態によってスタイルを指定します(jsなどで動的処理場合は『is-』接頭辞を付けたりします)

	・テーマ(theme.css)：サイトのトンマナ(統一性)を定義
		サイト全体の見た目や、雰囲気を統一させるためのスタイルを指定します

	SMACSSはSassを利用する事を前提としており、ファイルを細分化した後に全てstyle.scssに＠import
	してコンパイルする事を推奨しています。





・SMACSSの基本
	
	cssの設定を次の５種類に分類する。
	ベース：要素そのもののデフォルトスタイル
	レイアウト：ページをエリアごとに分割
	モジュール：再利用可能なパーツ
	状態（ステート）：レイアウトやモジュールの特定の状態を示す
	テーマ：サイトのルック＆フィールを定義

ベースルール
	ベースルールは、サイト全体で要素そのもののデフォルトスタイルを定義します。

	ベースルールでは、主に次のセレクタを使ってスタイルを適用します。要素そのものの見た目を定義するという
	性質のため、IDやクラスは使いません。

	要素セレクタ（body、a）
	属性セレクタ（input[type=text]）
	擬似クラスセレクタ（a:hover）

要素のデフォルトの見た目
	bodyの背景や、リンクのデフォルトカラーや下線の状態、フォントスタイルなど、サイト全体での要素そのもの
	の見た目は、次のように要素セレクタに対して定義していきます。

	body {
 	 background: white;
	}

	a:link {
  	color: blue;
	}
	a:visited {
 	 color: navy;
	}
	a:hover,
	a:active,
	a:focus {
  	color: red;
	}
	...

...
ここで注意したいのは、要素セレクタに対してあまりにも具体的なスタイルを指定をしてしまうと、
後々その要素を使った別の見た目のモジュールを追加したくなった場合に、ベースのスタイルを
すべて上書きしなければならなくなるということです。

例えば、tableの場合、表組みのデザインが1パターンしかないからといって、tableタグ自体に
そのデザインのスタイルを直接指定してしまうと、あとからパターンを追加するときに面倒です。
tableの場合は、次のようにリセットのみにとどめておくと扱いやすいでしょう。























・FLOCSS
	Foundation Layout Object CSSの略。OOCSSやSMACSS、BEMなどのコンセプトを取り入れた設計思想で、
	SMACSSの様なレイヤー構成とBEMの命名規則を採用しています。こちらもマルチクラスでスタイルを適用させます。

	原則：
	Foundation, Layout, Objectの３つのレイヤーとObject下のComponent, Project, Utilityの
	３つの子レイヤーで構成される。
	MindBEMdingの命名規則を用いる。
	Objectには接頭辞(プレフィックス)を付ける

	Foundation, Layout
	Foundation：Reset.cssやNormalize.cssなどブラウザのデフォルトスタイルの初期化やプロジェクトの基本的なスタイルを定義。
		
	Layout：ヘッダーやメインのコンテンツエリア、サイドバー、フッターなどプロジェクト共通のコンテナブロックのスタイルを定義。

	Object(Component, Project, Utility)
	Component：再利用できる小さい単位のパーツを定義。接頭辞に.c-を付ける。
	
	Project：いつかのcomponentとそれに該当しない要素によって構成される集合体。接頭辞に.p-を付ける。ex. 記事一覧、ユーザープロフィール、画像ギャラリーなどのコンテンツ。

	Utility：componetやProjectレイヤーの定義では解決出来ないわずかなスタイルの調整などに用いる汎用クラスで単一のスタイルだけを定義したモノ。接頭辞に.u-を付ける。
	
	omponentとProjectの違い
	何を最小単位(component)とするかは人によって異なり、時にCSSを破綻させる原因ともなります。そういった際の分かりやすい分類の例としてPowerpointの図形とグループが挙げられます。
	component：パワポの図形１つの単位
	project：グループ化して動かす単位

	Objectの命名規則
	BEM同様Block__Element—Modifierの規則に則って命名する。唯一JavaScriptで操作される様な「状態」
	に付いてはSMACSSのStateパターン同様の.is-を接頭辞に付ける。
	ex. .is-active































































			
	