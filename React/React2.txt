・基本的なページ遷移

	import { BrowserRouter, Link, Switch, Route } from "react-router-dom";

	import { Home } from "./Home";
	import { Page1 } from "./Page1";
	import { Page2 } from "./Page2";
	import "./styles.css";

	export default function App() {
  		return (
    			<BrowserRouter>
      		<div className="App">
        		<Link to="/">Home</Link>
        		<br />
        		<Link to="/Page1">Page1</Link>
        		<br />
        		<Link to="/Page2">Page2</Link>
      		</div>

      		<Switch>
        		<Route exact path="/">
          		<Home />
        		</Route>
        		<Route path="/page1">
          		<Page1 />
        		</Route>
        		<Route path="/page2">
          		<Page2 />
        		</Route>
      		</Switch>
    			</BrowserRouter>
  		);
		}


	// ここまでで、ReactRouterDomのLinkというコンポーネントでHomeを押したときに”/”にReactRouterのpathを書き換えると
	という処理はされるが、Homeコンポーネントはレンダリングされない。そこで、<switch></switch>　を使いその処理を行う。その中で
	Routeでアドレスを指定する。

	<Route exact path="/">	ここでexactがないと/が入ったPATHが来た時点でHOMEがレンダリングされてしまう。EXACTは
          <Home />		完全一致という意味。
     </Route>


・ネストされたページ遷移

import { Home } from "./Home";
import { Page1 } from "./Page1";
import { Page2 } from "./Page2";
import { Page1DetailA } from "./Page1DetailA";
import { Page1DetailB } from "./Page1DetailB";

        <Route
          path="/page1"
          render={() => (
            <Switch>
              <Route exact path="/page1">
                <Page1 />
              </Route>
              <Route path="/page1/detailA">
                <Page1DetailA />
              </Route>
              <Route path="/page1/detailB">
                <Page1DetailB />
              </Route>
            </Switch>
          )}
        />

render でアロー関数をとり、returnする個所に同じようにページ遷移を記述し、複数書く事も可能。
renderの第一引数はpropsがもとから入っており、なかにはmatch,location,historyを渡している。macthの中でURLを
渡しており、それを使い、page1配下であることを確定するような記述が可能。



<Route
  path="/page1"
  render={({ match: { url }}) => (
              
    <Switch>
       <Route exact path={url}>
         <Page1 />
      </Route>
       <Route pathe('s(ur1)/detaila')>
        <Page1DetailA />
      </Route>
       <Route
        <Page1DetailB />
      </Route>
    </Switch>
	)}
	/>




