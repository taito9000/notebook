・マイグレーション
	マイグレーションはデータベースのバージョン管理のようなもので、チームがアプリケーションのデータベーススキーマ
	を定義および共有できるようにします。ソース管理から変更を取得した後に、ローカルデータベーススキーマに
	カラムを手作業で追加するようにチームメートに指示する必要があったことを経験していれば、データベースの
	マイグレーションにより解決される問題に直面していたのです。

	LaravelのSchemaファサードは、Laravelがサポートするすべてのデータベースシステムに対し、テーブルを作成、
	操作するために特定のデータベースに依存しないサポートを提供します。通常、マイグレーションはこのファサードを
	使用して、データベースのテーブルとカラムを作成および変更します。


・テーブル作成
	以下のコマンドでcreate_blogs_tableというテーブルが作成された。

	$ sail artisan make:migration create_blogs_table

	そして、マイグレーションを実行する。
	$ sail artisan migrate

・ロールバック機能
	マイグレーションをミスした場合などに、実行済みのマイグレーションを取り消す機能。


	sail artisan migrate:status　で確認。　

	sail artisan migrate:rollback　

	にオプション等を付けれる。

	マイグレーションファイル内にある、public function downにロールバック用の処理を記述する。
	マイグレーション時にはupが使用されるため、それを打ち消すようにdownの処理を記述する。



・モデルによるデータベース操作

　モデルクラスのインスタンスに値をセットし、saveまたは、createメソッドで追加する。

１、プロパティに個別に指定する方法
	インスタンスを作成し、テーブルのカラム名にプロパティをセットし、saveメソッドでデータベースに追加する。

２、配列で一括で指定する方法
	連想配列をコンストラクタの引数に指定しインスタンスを作成、saveメソッドでデータベースに追加する。
	また、createメソッドにより一括指定と同時にｄｂに追加することも可能。


・fillable
　配列で値を一括設定する場合はfillableによるマスアサインメント脆弱性への対策が必要。
モデルクラスにprotectedの$fillableプロパティに変更したいカラム名を指定する。

class Message extends Model


{
　use HasFactory;

  protected $fillable = ['name', 'comment'];

}
















































































































































