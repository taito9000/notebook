・関数　isset

	「isset」はこの変数に値が入っているかどうかを確認するための関数になります。
	さらに正確にいうと、「isset」は

	・変数に値が入っていて、
	・かつNULL（空っぽ）ではないときに、

	TRUE（正）を、返り値とします。

・関数　empty

	「empty」では変数が空っぽの時にTRUEになります。
	「empty」では要素が０やNULLのときもTRUEになります。

	基本的に、「isset」と「empty」では返り値が逆になります。
	しかし、以下の場合には注意が必要です。

	・「””（空の文字列」

	・「0（整数の０）」

	・「”0”（文字列の０）」

	この場合、「isset」と「empty」は共にTRUEを返します。
	その為、判定する条件によってこの2つを使い分けるようにしましょう。

・hasメソッド

	hasメソッドについて解説します。
	hasメソッドは引数に指定したパラメータがリクエストに存在するか判定し、
	結果をboolで返すメソッドです。

	hasメソッドを使うには
	use Illuminate\Http\Request;
	を宣言することが必要です。


public function sample(Request $request){
    $result = $request->has('test');
}
	上記のサンプルでは$requestに「test」が存在していればtrue、
	存在しなければfalseを返します。






・requestクラス
	Requestクラスはフォームの内容などをリクエストパラメータとして受け取る際に
	使用する。

・アロー演算子「->」とダブルアロー演算子「=>」

アロー演算子

	
	オブジェクトで使う。プロパティを呼び出す。
	クラスのメソッドやプロパティにアクセスする。
	クラスは関数や変数がまとまった棚みたいなもんです。
	メソッドはその棚に保管してある関数で、プロパティは変数のことです。
	そこに入ってる値を取り出すみたいなイメージですね。


	例えば、
	以下のようにHelloWorldというクラスを作成し、中にプロパティとして$msgを作成する。
	クラスの中でこのプロパティにアクセスするためにはアロー関数->を使って、$this->msg と記述する。
	クラスの外で使う場合は、new クラス名 でインスタンスを生成して、アロー関数->を使って、
	インスタンス->プロパティ名 として値を呼び出す。


	//クラスの作成

	class HelloWorld {
    		// プロパティの宣言
    		public $msg = 'Hello World!';

    		// メソッドの宣言
    		public function greeting() {
        		echo $this->msg;
    		}
	}

	//関数の作成

	function call_greeting(){

  		$obj = new HelloWorld();　　２、クラスHelloWorldからインスタンスを生成し
									変数$objに代入

  		$obj->greeting();			　３、インスタンスの中のgreeting関数を実行

	}
	call_greeting()                 1、関数call_greetingを実行

	４、クラスの中の$msgプロパティをechoする。
	５、Hello Worldが表示される。


ダブルアロー演算子
	
	ダブルアロー演算子： 連想配列で使う。キーに対してバリュー（値）を指定する。
	ダブルアロー演算子は連想配列でKey（キー）に対してValue（値）を指定するときに使う。
	こっちの方が馴染みがあるはず。

	‘キー名’ => ‘値’　の形で指定する。

  	$arr = [
    		'key1' => 'val1',
    		'key2' => 'val2',
    		'key3' => 'val3'
  	];

  	echo $arr['key1'];


・　「" "」「' '」の違い

	文字列の中に変数があった場合に違いが出る。
	文字列の中に変数があった場合、
	シングルクォーテーションでは変数が「文字」として認識される
	ダブルクォーテーションでは変数が「変数内の値」に変換される
	変数の変換処理がある分、動作の速度的には
	シングルクォーテーション＞ダブルクォーテーション
	になります。


  $count = '5'; 
  echo 'バナナが$count本あります。';
  echo '<br>'; //「改行」
  echo "バナナが{$count}本あります。";

	出力結果
	バナナが$count本あります。
	バナナが5本あります。













































