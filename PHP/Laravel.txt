
・・・・・・Laravel・・・・・・

・xamppのhtdocs内で　composer create-project laravel/laravel=7.2.5 repsWeb

でプロジェクトを作成。

・ｍｖｃモデル

・Model（モデル）：DBとの架け橋（データを格納したり取り出したり）
	データをDBに格納
	DBからデータを引き出す
	DBのテーブルを関連付けできる（カテゴリー作成の際に

作業するファイル/フォルダ・・・　app
	
・View（ビュー）：フロントサイドを作る（アプリの見た目を作る by HTML,CSS,Js）
	Controllerからデータを受け取る
	アプリの見た目を作る
	ヘッダーやフッターなどの使い回しができて便利
	CSS,Bootstrap,Vue.jsがデフォルトで付いている

作業するファイル/フォルダ・・・ resources/views
	
・Controller（コントローラー）：アプリの全体を統括する（データをModelに渡したり、データをViewに渡したりする処理関数を作る）
	データをModelに送信する
	データを受け取りフロントへ送信する
	関数処理は基本ここに書く
	SNS認証の処理
	決済システムの処理
	検索機能の処理
	リクエストが来た際にどのViewを表示するか制御

作業するファイル/フォルダ・・・ app


app　			modelとcontoroller
resources/views 	view
routes/web.php 	Routing
config			各種設定ファイル
database			マイグレーション


例
ブログシステムをMVCモデルで解説

１、記事を書く
２、データがrouteによって受け取られる
３、routeでどのControllerに送信するか決める
４、Controllerからmodelに送信される
５、Modelがデータベースに格納する

６、データベースからModelに記事データが送信される
７、ControllerからViewにデータを送信する
８、Viewで見た目を整える
９、記事が公開される

webブラウザ　->　Routing　->  Controller -> Model -> Database -> Model -> Controller -> View -> webブラウザ


・初期画面を表示する仕組み

	Laravelはブラウザからｈｔｔｐリクエストを受け取るとまず、Routingの設定を確認します。Routingの役割をする
	「Routes」ファイルにはHTTPリクエストに対する対応方法が書かれたファイル「web.app」が入っている。

	htdocs/tasklist/routes/web.phpのなか

		Route::get ( '/', function (){
    			return view ('welcome');
 		});

	'/'ルートディレクトリにgetメソッドでリクエストが来た時に、view('welcome')を実行するという意味。
	そして、welcome.blade.phpを実行する（view）。view ('welcome')関数は「resources/views/」
	フォルダにある「welcome.blade.php」というファイルを実行するという意味です。
	welcome.blade.phpの中身はｈｔｍｌで記述されている。
	Laravelでは
		routesフォルダにある「web.php」からviewフォルダ内にある「＊＊＊.blade.php」を実行
	し、ブラウザに表示しています。この仕組みを、blade、または、bladeテンプレートと言います。





・ルートをprefix()を用いてグループ化

prefixとは、web.phpでRouteを設定するとき、URIのプレフィックス（接頭辞）
をグループ化して設定できるメソッドです。見やすい管理しやすい。

Route::get('/sample/show', [SampleController::class, 'showPage']);
Route::get('/sample/esit', [SampleController::class, 'editPage']);
Route::get('/sample/conf', [SampleController::class, 'confPage']);
　　　　　　　　　　　　　　　　　　　　これをこう↓

Route::prefix('sample')->group(function (){
    Route::get('show', [SampleController::class, 'showPage']);
    Route::get('esit', [SampleController::class, 'editPage']);
    Route::get('conf', [SampleController::class, 'confPage']);    
});

・URLをグルーピングすると同時に、nameも同時にグループ化したい

	Route::get('/questionBoard', [questionBoardController::class, 'index'])->name('index');

													↓こうなる

	Route::prefix('questionBoard')->name('questionBoard.')->controller(questionBoardController::class)->group(function () {
    		
		Route::get('','index')->name('index');   
	
	});

	同じURL「questionBoard」から始まるルートをprefix()を用いてグループ化しています。
	同様にルート名も->name('questionBoard.')を用いてグループ化しています。
	同様にコントローラーも共通なので->controller(questionBoardController::class)を用いてグループ化しています。
	これにより

	Route::get('','index')->name('index');
	は URL：questionBoard/
	メソッドはquestionBoardControllerのindex()
	ルート名はquestionBoard.index となります。

	Route::get('','index')->name('index');
	はもともと
	Route::get('/questionBoard', [questionBoardController::class, 'index'])->name('index');
	こうだった



































































































































































