java

・静的型付け（データ型を最初に固定で決める形式）オブジェクト指向が強いバックエンドが主の言語。

・プラットフォーム非依存である。Javaプログラムが特定のハードウェア
やオペレーティングシステムに依存せずに、あらゆる環境での共通動作を保証する。これを可能にしているのが、
ｊａｖａ仮想マシン（ｊｖｍ）

・コンパイルが必要。

・業務システムのバックエンドによく使用される。

・需要が一定して世界的に高い。

・ｃ言語がもとになっている。

・難易度が高い。

・Javaプログラムは、複数以上のスレッドを同時走行できる。これをマルチスレッドと言う。
多数のスレッドを扱う大規模システムにも対応しており、例えばスレッドグループAPIは、スレッドたちを役割や
性質でグループ化して一括操作できる。

・Javaプログラムのメモリ管理は、Java仮想マシンのガベージコレクションによって行われる。ガベージコレクション
とは、すでにどこからも参照されていないインスタンスを自動的に特定して破棄し、
その占有メモリ領域を自動的に解放する機能である。

・分散ネットワークプログラミングを重視しているJavaは、
サンドボックスモデルに基づいたセキュリティ機構を備えており、セキュリティ面も信頼できる。



JavaScript

・jsのつかいどころ
	ポップアップウィンドウを出現させる
	ブラウザ上で画像を拡大表示してWebページを見やすくする
	メッセージ送付やパスワード入力のフォームを設置する
	カーソルを合わせると表示されるメニューの設置
	スライダーの作成
	カウントダウンタイマーの設置

	JavaScriptの基本は、HTML上の要素が保持するさまざまな値（プロパティ）の操作です。
	入力フォームに文字列を書きこんだり、画面上の要素を動かしたりできます。

	ブラウザ上で動くJavaScriptは、フロントエンドとサーバーサイド間のやりとりを行える言語。
	たとえば
	郵便番号をフォームに入力すると、それに対応した住所をサーバーから取得してフォームに表示させる。
	チャット画面を開いているとき、他人が送信したチャットメッセージを自分の画面に表示させる。
	検索フォームに入力した単語に関連するキーワードの候補を表示する。
	
	Webページ上に複雑なアプリケーションを作れる
	「画面を部分的に動かす」「サーバーと情報を送受信する」などができるJavaScriptは、
	その機能を活用して、ブラウザ上に高度で複雑なアプリをつくれます。
	
	DOM操作！！
	

・動的型付け（データ型を適宜変更できる）フロントエンドが主の言語。

・if、forなどの制御構造による手続き型プログラミングスタイル
・prototype、classなどのオブジェクトによるオブジェクト指向プログラミングスタイル
・map、高階関数などの関数操作による関数型プログラミングスタイル
上記の３スタイルでのコーディングが可能。

・ブラウザ上で動くためコンパイルは必要ない。

・動きのあるwebページの作成やwebアプリのフロントエンドなどに使用される。

・livescriptがもとになっている。

・Ｊａｖａと名前が似ている全くの別物。

・javaに比べればとっつきやすい。

・node.jsで大きな規模は難しいがサーバーサイドも可能

・ＭＳ社のＩＥブラウザに対応するためにEcmascriptの仕様に則ってJavascriptという言語が実装されている

・２０１５年のアップデートでletやconst、アロー関数、クラスの追加（これにより「クラスベースのオブジェクト指向」可）
など大きなアップデートが行われた。これ以前は「プロトタイプベースの」オブジェクト指向だった

？	・JavaScriptではしばしば、ネットワークを介したリクエストのような "待ち" がある処理を行う。
これに対処するために非同期処理をサポートし並行処理が可能となる。

・JavaScriptでは複数スレッドを用いた並列処理が可能ではない。Javascriptという言語は、シングルスレッドで動作します。
　よって、基本的に複数スレッドは使えません。
　非同期処理は、動作の見かけ上、まるでマルチスレッドであるかのように見えますが、実際は１つのスレッドが空き時間を管理
しながら順番に実行されているというのが実態です。また、WebWorkerを使うことでマルチスレッドの実現は可能ですが、
WebWorkerは厳密にはHTML5のAPIであり、純粋なプレーンJSとは
分けて考える必要があります。


先生より
	まだまだclassを使用したJavascriptの普及率は実務において高くありません。
	また、ES 2015の class は、あくまでも関数の糖衣構文(シュガーシンタックス)であり、
	Javascriptのトップレベルオブジェクトが「関数」であることに変わりはありません。

	そこで、Javascriptを理解し使いこなす上で最も重要な「関数」について
	書き方の種類をリストアップし、それぞれの特徴や違いを調査してみてください。


まず、関数とは？
JavaScriptでは、関数を定義するためにfunctionキーワードを使います。
functionからはじまる文は関数宣言と呼び、関数を定義します。
関数は次の4つの要素で構成されています。

関数名 - 利用できる名前は変数名と同じ（「変数名に使える名前のルール」を参照）
仮引数 - 関数の呼び出し時に渡された値が入る変数。複数ある場合は,（カンマ）で区切る
関数の中身 - {と}で囲んだ関数の処理を書く場所
関数の返り値 - 関数を呼び出したときに、呼び出し元へ返される値

・関数が値を返す必要がない場合は、return文の返り値を省略できます。
・デフォルト引数（デフォルトパラメータ）は、仮引数に対応する引数が渡されていない場合に、
デフォルトで代入される値を指定できます。これにより、引数がundefinedになりエラーの
温床になることを防ぐことが可能。


1,functionというキーワードを使って書く方法（関数宣言）

	function 関数名(引数) {
		処理;
	}
	

	function num(number){
		return:number * 2;
	}
	const a = num(3);

	console.log(a);
 
	出力結果は「６」


２, 関数がオブジェクト要素になる場合
	
	
	関数名 : function (引数) {
  		処理；
	}


	const yamada = {

	name: 'yamada',

	age: 20,

	skill: ['html', 'css', 'javascript'],

	hello: function () { console.log('こんにちは！'); }

	}

	yamada.hello(); 

	「こんにちは！」と出力される


３,変数定義っぽく書く方法(関数式)

	const 関数名 = function(引数) {
			処理;
	}

	const num = function(number){
		return number * 2;
	}

	const a = num(3);

	console.log(a);
	
	出力結果は「６」





JavaScriptでは、関数は関数オブジェクトとも呼ばれ、オブジェクトの一種です。
関数はただのオブジェクトとは異なり、関数名に()をつけることで、関数としてまとめた処理を
式（値）として呼び出すことができます。

２のコードでは、定義したhello関数をyamadaオブジェクトの値として呼び出し、使用しています。

オブジェクトはプロパティの集合です。プロパティとは名前（キー）と値（バリュー）が対になったものです。
プロパティのキーには文字列またはSymbolが利用でき、値には任意のデータを指定できます。 
また、1つのオブジェクトは複数のプロパティを持てるため、1つのオブジェクトで多種多様な値を表現できます。
今までも登場してきた、配列や関数などもオブジェクトの一種です。

３のコードでは、定義したnum関数が変数のように代入されています。

()をつけて呼び出されなければ、関数をオブジェクトとして参照できます。 
関数はほかの値と同じように変数へ代入したり、関数の引数として渡すことが可能です。

変数へ代入している式（値）のことを関数式と言います。 
関数宣言は文でしたが、関数式では関数を値として扱っています。
これは、文字列や数値などの変数宣言と同じ定義方法です。



4,アロー関数

アロー関数と従来の関数には違いがあり、また制限もあります。

・アロー関数には、this、arguments、superへの参照ができないので、メソッドとして使用することはできません。
・thisが静的に決定できる（詳細は「JSprimer 関数とスコープ」で解説します）
・アロー関数には new.target キーワードがありません。（コンストラクタ関数ではない）
・アロー関数はコンストラクターとして使用することはできません。
・アロー関数は、call、apply、bind のような、一般にスコープを確立することを前提としたメソッドには
適していません。
・アロー関数は本体内で yield を使用することはできません。
・名前をつけることができない（常に匿名関数）
・functionキーワードに比べて短く書くことができる


・関数の仮引数が1つのときは()を省略できる
・関数の処理が1つの式である場合に、ブロックとreturn文を省略できる




・従来の関数
	const func1 = function(str){
	return str;
	｝

	console.log(func("func1です"));

出力　func1です


・アロー関数
	cnst func2 = (str) => {
	return str;
	}

	console.log(func2("func2です"));

出力　func2です


・引数が１つなので変数の（）を省略できる。


	cnst func3 = str => {
	return str;
	}

	console.log(func3("func3です"));

出力　func3です


・中の式が１行で終わる単一式の場合{}とreturnを省略できる。

	cnst func4 = str => str;
	

	console.log(func4("func4です"));

出力　func4です






5,コールバック関数と高階関数

関数が値として扱えること（扱えるという状況や環境？）を、ファーストクラスファンクション（第一級関数）と呼びます。
関数はその場で作った匿名関数を関数の引数（値）として渡すことができます。 
引数として渡される関数のことをコールバック関数と呼びます。 一方、コールバック関数を引数として使う
関数やメソッドのことを高階関数と呼びます。

	function 高階関数(コールバック関数) {
    		コールバック関数();
	}

6,メソッド

オブジェクトのプロパティである関数をメソッドと呼びます。 JavaScriptにおいて、関数とメソッドの機能的な違いはありません。
しかし、呼び方を区別したほうがわかりやすいため、ここではオブジェクトのプロパティである関数をメソッドと呼びます。

次のコードでは、objのmethod1プロパティとmethod2プロパティに関数を定義しています。
このobj.method1プロパティとobj.method2プロパティがメソッドです。

	const obj = {
		method1: function() {
			処理
		},
		method2: () => {
			処理
		}
	};

メソッド１はfunction キーワードを使ったメソッドでメソッド２はアロー関数を使ったメソッド。



7,即時関数


即時関数は、関数を定義すると同時に実行される匿名関数（無名関数）。グローバルの名前を全く潰さず、
ローカルのスコープを作り出しそのまま処理を実行することができる。

	(function(){
    		処理
	})();

	(function(){
    		処理
	}());

function(){}の場合『function』と書くと関数定義の文だと判断されてしまい、関数定義文では『function』に
続けて関数名を記述しなければならないので文法エラーとなってしまいます。しかし、(function(){})

ｆの左の（）は計算優先度の（）で中に影響を与えない。

『無名関数』ならば名前を定義しないのでグローバルで使える名前を減らすことなく処理を構築することができます。

関数宣言で定義された関数は
自分の記憶：（一度すべてのコードを読み込んだ後に関数に参照メモリが与えられるため）
サイトの説明：「JavaScriptのファイルを取得し、を取得し、解析(レンダリング)が終わった瞬間に生成されてしまうため」、
宣言される前から実行することができます。しかし、関数式の場合はエラーになるので、実際に関数の使われ方としては、
「関数式」のほうが「関数宣言」より使われやすい。

	(function(x, y){ 
		console.log(x + y); 
	})(1, 2); 

 仮引数『x』には『1』が、仮引数『y』には『2』が入ります。
『3』が出力されます。引数に『1』と『2』を渡します。


１	var x = 0; 
２
３	(function(x){ 
４		++x;
５		console.log(x); 
６	})(x); 
７
８	console.log(x); 


１,グローバル変数『x』は『0』
２,
３，グローバル変数『x』の値『0』を仮引数『x』で受け取ります。
４,仮引数『x』に『1』を加算します。
５,『1』が出力されます。
６，グローバル変数『x』を渡します。この時点の『x』は『0』です。
７，
８，即時関数で加算された『x』は仮引数『x』なのでグローバル変数『x』の値は変わりません。
『0』と出力されます。



・DOM
DOM は JavaScript 言語の一部ではなく、ウェブサイトを構築するために使用される Web API の 1 つです。
DOM は、特定のプログラミング言語から独立し、文書の構造表現を単一の一貫した API から利用できるように
設計されています。 ほとんどのウェブ開発者が JavaScript でしか DOM を使用しないとしても、DOM の実装
はどの言語でも構築することができます。


・イベントハンドラ
イベントハンドラとは、コンピュータプログラムで、特定の出来事（イベント）が発生した時に実行する
よう定められた処理のこと。対象となるイベントの種類や条件と、処理内容をセットで記述する。


・イベントリスナ
イベントリスナーとは、JavaScriptでイベントを使う方法の一つで、addEventListenerメソッドの
第一引数にイベントを指定し、第二引数に関数を指定し実行したい処理の内容を記述します。
イベントリスナーの使い方は以下の通りです。

const elem = document.getElementById('HTML要素'); // トリガーになる要素を取得

elem.addEventListener('イベント',function(){
  処理
})

イベントリスナーを使って複数のイベントを登録した場合、登録したイベントの処理分を実行してくれますが、
イベントハンドラで複数のイベントを登録すると最初に登録したイベントは後に登録したイベントに上書きされてしまいます。
イベントリスナーとイベントハンドラどちらを使うべきかは、ユースケースによって完全に異なりますが一般的には
イベントリスナーのaddEventListenerメソッドを使うことが一般的です。

・API
API(Application Programming Interface)とは、接続先のOSを呼び出すことや互いのソフトウェアやアプリケーション機能の一部
を共有することです。APIを通じて連携をすることで、アプリケーション機能を拡張させ、双方のアプリが更に便利になることが
メリットです。人間がコンピュータを利用する際はGUI(Graphical User Interface)を通じてOSやアプリケーションを利用しますが、
コンピュータはプログラムを通じてOSやアプリケーションの機能利用するので、プログラマ（アプリケーションエンジニア）は
CUI(Character-based User Interface)を用いてソフトウェアやアプリケーションを開発します。一方でAPIは、アプリケーション開発
で既存のライブラリを使う場合に用いられ、用意されたAPIに従って処理を記述することで、ライブラリの中身を知らなくてもライブラリが
持つ機能を使用できます。OSが提供する機能を呼び出すために使われるAPIもあれば、他のアプリケーションが提供する機能を呼び出す
ために使われるAPIも存在します


・loadイベント
load イベントは HTML ページに含まれる画像やスタイルシートなどすべてのリソースの読み込みが完了した時点で発生するイベントです。
window オブジェクトで発生します。
イベントの種類 : Event
バブリングの可否 : 不可
キャンセルの可否 : 不可

・$マークはjQueryという意味

・セレクタをしっかり意識する。

・メソッド、関数を使うために必要な要素は３つだけです。
①メソッド名
②引数
③戻り値
よって以下を調べればメソッドの概要をつかめる。
①メソッド名を訳し、意味を考える。
②引数に何を渡すか。
③戻り値として何が返されるか。


JavaScriptの命名規則として有名な「Google JavaScript Style Guide」より
・名前には半角英数字とアンダースコア「_」とドルマーク「$」を使用する
・外部(プログラムを書いた人以外)の人が見ても分かりやすい名前にする。独自のルールで単語の文字を省略したりしない。
悪い例：「wgcConnections」。何を指しているか外部の人には意味不明。
・クラス名は先頭大文字のキャメルケース(複数語を単語の先頭を大文字で結合したもの)。例：BigDog。
・関数名は先頭小文字のキャメルケース。例：sendMessage
・定数名はすべて大文字のスネークケース(複数語をアンダースコア「_」で結合したもの）。例：COLOR_CODE_RED
・変数名(引数名)は先頭小文字のキャメルケース。例：priceCountReader



・命名する際の前提

①変数は「名詞」、関数・メソッドは「動詞」で命名する
②命名する際の記法は統一する
ただし、JSではキャメルが基本なので、キャメルを基本的に使用する。
メソッド名、関数名を付ける際には「〇〇をする」と日本語で命名し、それを英語に翻訳します。
そして、実際の処理も「〇〇をする」ことに特化させます。
クラス(JSではコンストラクタ関数)ではない場合、大文字から始める命名は不適切です。

・HTMLから値を取得する際のメソッド
querySelectorの方が、getElementsBy～の複数形メソッドよりも使いやすいかと思います。
ただ、ID属性が付与されている要素を取得する場合は、getElementByIdを使う方が良いです。
どちらも無条件で単一取得できますが、getElementByIdの方が処理速度が優れているからです。
ID以外の要素を【単一で】取りたい場合には、querySelectorを使うというように使い分けると良いでしょう。
また、複数で取りたい場合は、getElements～を使っても良いですが、querySelectorAll メソッドがあるので、
そちらを使う選択肢もあります。

最初の確認リスト
１、インデントをそろえ、入れ子の構造が正しいか確認
２、変数やメソッド、関数などのスペルが正しいか
３、HTML内の処理は上から順に流れることを前提にしっかりと、
正しいタイミング（読み込み時、読み込み中、読み込み後）になっているか
４、取得している値の属性（タグ、クラス、idなど）は正しいか



『今後、JavaScriptの基礎を勉強していくにあたって、押さえておくべき項目のリスト』

大前提：
　命名の統一、インデントを揃えることを習慣化する。
　新しい知識は「概念」、「〇〇とは～」のレベルを重要視して理解/記憶に努める。

① 様々なform部品から入力・選択された内容を取得/変更できるようにする
　・input (type="xxx" のパターンも調べる)
　・select (ドロップダウン)
　・radio (単一選択に使われる)
　・checkbox (複数選択に使われる)

②form部品ではないHTML要素から、内容を取得/変更できるようにする
　form部品ではない要素：p, div, span など、限りなくあるのでいくつか抜粋する

③上記の取得/変更のパターンを学ぶ
　・id 付与 (これが最も簡単)
　・class付与
　・name付与
　・属性の付与なし

④HTMLについての理解を徐々に深める
　・HTMLタグには、それぞれ付与して良い属性と付与できない属性がある
　　⇒調べた結果、③のパターンで仕様違反がないか検証する

Javascriptの入門から卒業するための基礎知識としては、まずここまでを万全にしておきましょう！




・map
・スプレッド構文
・分割代入
・演算子







